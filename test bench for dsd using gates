`timescale 1ns / 1ps

module logic_gates_tb;

    // Inputs
    reg a;
    reg b;

    // Outputs
    wire and_out;
    wire or_out;
    wire not_out;
    wire nand_out;
    wire nor_out;
    wire xor_out;
    wire xnor_out;

    // Instantiate the logic gates module
    logic_gates uut (
        .a(a),
        .b(b),
        .and_out(and_out),
        .or_out(or_out),
        .not_out(not_out),
        .nand_out(nand_out),
        .nor_out(nor_out),
        .xor_out(xor_out),
        .xnor_out(xnor_out)
    );

    // Test cases
    initial begin
        // Initialize inputs
        a = 0; b = 0;
        #10; // Wait 10 time units

        a = 0; b = 1;
        #10;

        a = 1; b = 0;
        #10;

        a = 1; b = 1;
        #10;

        // Finish simulation
        $stop;
    end

endmodule









code for dsd using verilog

// Verilog code for basic logic gates

module logic_gates (
    input wire a,    // Input A
    input wire b,    // Input B
    output wire and_out,  // Output for AND gate
    output wire or_out,   // Output for OR gate
    output wire not_out,  // Output for NOT gate
    output wire nand_out, // Output for NAND gate
    output wire nor_out,  // Output for NOR gate
    output wire xor_out,  // Output for XOR gate
    output wire xnor_out  // Output for XNOR gate
);

    // AND gate
    assign and_out = a & b;

    // OR gate
    assign or_out = a | b;

    // NOT gate (only requires one input)
    assign not_out = ~a;

    // NAND gate
    assign nand_out = ~(a & b);

    // NOR gate
    assign nor_out = ~(a | b);

    // XOR gate
    assign xor_out = a ^ b;

    // XNOR gate
    assign xnor_out = ~(a ^ b);

endmodule
